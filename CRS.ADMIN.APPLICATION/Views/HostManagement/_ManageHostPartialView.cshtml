@model CRS.ADMIN.APPLICATION.Models.HostManagement.ManageHostModel

<style>
    .sliderBlue {
        accent-color: #d75a8b;
    }
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<style>
 
    #cropModal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
    }

    #imageToCrop {
        max-width: 90%;
        max-height: 80vh;
    }
</style>
<div id="add-new-host"
     class="drawer-close-disable  flex justify-end fixed top-0 right-0 z-40 h-screen overflow-y-auto transition-transform translate-x-full"
     tabindex="-1" aria-labelledby="add-new-host-club" aria-modal="true" role="dialog">
    <div class="bg-white w-[616px] drawer-container relative">
        <div class="drawer-form-container sticky top-0 z-[5] ">
            <div class="drawer-form flex justify-between bg-secondary-color-pink py-[16px] px-[24px] h-[56px]">
                <div>
                    @CRS.ADMIN.APPLICATION.Resources.Resource.Manage_Host
                </div>
                <button type="button" data-drawer-hide="add-new-host-club" aria-controls="add-new-host-club"
                        class="text-[20px]">
                    <i class="las la-window-close text-white" onclick="CancelFunction()"></i>
                </button>
            </div>
        </div>
        <div class="p-[24px]">
            <div class=" py-4 grid gap-6">
                @using (Html.BeginForm("ManageHost", "HostManagement", FormMethod.Post, new { @id = "ManageHostForm", enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.AgentId)
                    @Html.HiddenFor(model => model.HostLogo)
                    @Html.HiddenFor(model => model.HostIconImage)
                    @Html.HiddenFor(model => model.clubCategory)
                    if (!string.IsNullOrEmpty(Model.HostId))
                    {
                        @Html.HiddenFor(model => model.HostId)
                    }
                    <div class="flex gap-2">
                        <div class="flex items-center gap-2 profile-steps add-new-host-wizard  active" id="step1">
                            <div class="steps-number ">
                                1
                            </div>
                            <div class="steps-text">
                                @CRS.ADMIN.APPLICATION.Resources.Resource.Basic_Information
                            </div>
                            <hr class="setp-divider" />
                        </div>
                        <div class="flex items-center gap-2 profile-steps add-new-host-wizard " id="step2">
                            <div class="steps-number ">
                                2
                            </div>
                            <div class="steps-text">
                                @CRS.ADMIN.APPLICATION.Resources.Resource.SNS
                            </div>
                            <hr class="setp-divider" />
                        </div>
                        <div class="flex items-center gap-2 profile-steps add-new-host-wizard " id="step3">
                            <div class="steps-number ">
                                3
                            </div>
                            <div class="steps-text">
                                @CRS.ADMIN.APPLICATION.Resources.Resource.SkillSets
                            </div>
                            <hr class="setp-divider" />
                        </div>
                        <div class="flex items-center gap-2 profile-steps add-new-host-wizard " id="step4">
                            <div class="steps-number ">
                                4
                            </div>
                            <div class="steps-text">
                                @CRS.ADMIN.APPLICATION.Resources.Resource.Lifestyle
                            </div>
                            <hr class="setp-divider" />
                        </div>
                    </div>
                    <div id="content1" class="content-section" style="display: block;">
                        <div class="grid gap-4 py-[10px]">
                            <div class="flex gap-2 text-primary-300 text-sm font-semibold items-center mt-[10px]">
                                <div class="flex-none">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Basic_Info
                                </div>
                                <div class="bg-[#F4F4F4] h-[1px] w-full">
                                </div>
                            </div>
                            <div class="grid grid-cols-2 gap-x-5 gap-y-4">
                                <div class="input-field-common">
                                    <label class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Host_Name (@CRS.ADMIN.APPLICATION.Resources.Resource.English)
                                    </label>
                                    @Html.TextBoxFor(model => model.HostName, new
                                   {
                                       @class = "w-full",
                                       @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Host_Name,
                                       //@onkeypress = "return isAlphabetWithSpace(event)",
                                       autocomplete = "off",
                                       @maxLength = "100"
                                   })
                                    <span class="error">
                                        @Html.ValidationMessageFor(m => m.HostName)
                                    </span>
                                </div>
                                <div class="input-field-common">
                                    <label class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Host_Name (@CRS.ADMIN.APPLICATION.Resources.Resource.Japanese)
                                    </label>
                                    @Html.TextBoxFor(model => model.HostNameJapanese, new
                                   {
                                       @class = "w-full",
                                       @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Host_Name,
                                       //@onkeypress = "return isAlphabetWithSpace(event)",
                                       autocomplete = "off",
                                       @maxLength = "100"
                                   })
                                    <span class="error">
                                        @Html.ValidationMessageFor(m => m.HostNameJapanese)
                                    </span>
                                </div>
                            </div>
                            <div class="grid grid-cols-2 gap-x-5 gap-y-4">
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Rank
                                    </label>
                                    <select id="large" class="select-common block w-full " name="Rank">
                                        @foreach (var item in ViewBag.RankDDL as IEnumerable<SelectListItem>)
                                        {
                                            var selectedId = ViewBag.RankDDLKey as string;
                                            if (item.Value == selectedId)
                                            {
                                                <option value="@item.Value" selected>
                                                    @item.Text
                                                </option>
                                            }
                                            else
                                            {
                                                <option value="@item.Value">
                                                    @item.Text
                                                </option>
                                            }
                                        }
                                    </select>
                                    <span class="error">
                                        @Html.ValidationMessageFor(m => m.Rank)
                                    </span>
                                </div>
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Position
                                    </label>
                                    @Html.TextBoxFor(model => model.Position, new
                                        {
                                           @class = "w-full",
                                           @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Position,
                                           //@onkeypress = "return isAlphabetWithSpace(event)",
                                           autocomplete = "off",
                                           @maxLength = "150"
                                        })
                                    <span class="error">
                                        @Html.ValidationMessageFor(m => m.Position)
                                    </span>

                                    @*<select id="large" class="select-common block w-full " name="Position">
                                            @foreach (var item in ViewBag.positionddl as IEnumerable<SelectListItem>)
                                            {
                                                var selectedId = ViewBag.postitionkey as string;
                                                if (item.Value == selectedId)
                                                {
                                                    <option value="@item.Value" selected>
                                                        @item.Text
                                                    </option>
                                                }
                                                else
                                                {
                                                    <option value="@item.Value">
                                                        @item.Text
                                                    </option>
                                                }
                                            }
                                        </select>*@

                                    <span class="error">
                                        @Html.ValidationMessageFor(m => m.Position)
                                    </span>
                                </div>

                            </div>
                            @*<div class="grid grid-cols-2 gap-x-5 gap-y-4" id="otherpositionid">
                                    <div class="input-field-common">
                                        <label class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                                            @CRS.ADMIN.APPLICATION.Resources.Resource.Others
                                        </label>
                                        @Html.TextBoxFor(model => model.OtherPositionRemark, new
                                       {
                                           @class = "w-full",
                                           @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Others,
                                           //@onkeypress = "return isAlphabetWithSpace(event)",
                                           autocomplete = "off",
                                           @maxLength = "100"
                                       })
                                        <span class="error">
                                            @Html.ValidationMessageFor(m => m.OtherPositionRemark)
                                        </span>
                                    </div>
                                </div>*@
                            <div>
                                <label class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.ProfileImage
                                </label>
                                <div class="file-upload-common">
                                    <label for="file_input_business_certificate" class="custom-file-upload w-[128px] flex-none text-ellipsis-customer ">
                                        <span>
                                            @CRS.ADMIN.APPLICATION.Resources.Resource.Choose_Images
                                        </span>
                                    </label>
                                    <input id="file_input_business_certificate" class="file-input" type="file" name="HostLogoFile" value="@Model.HostLogo"
                                           style="display:none;">
                                    <p id="file_name_bussiness_certificate"
                                       class="file-name w-max h-[23px] overflow-hidden pl-2 text-xs text-[#686868] leading-[25px]">
                                        @if (string.IsNullOrEmpty(Model.HostLogo))
                                        {
                                            @CRS.ADMIN.APPLICATION.Resources.Resource.No_File_Choosen
                                        }
                                        else
                                        {
                                            string fileName = Path.GetFileName(Model.HostLogo);
                                            @fileName
                                        }
                                </div>
                                <!-- Modal for cropping -->
                                <div id="cropModal" class="hidden fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center">
                                    <div class="bg-white p-4 rounded-lg max-w-lg w-full max-h-[80vh] overflow-auto">
                                        <div class="mb-4">
                                            <img id="imageToCrop" src="" alt="Image to crop" class="max-w-full">
                                        </div>
                                        <div class="flex justify-end">
                                            <button id="cropImageButton" class="bg-blue-500 text-white px-4 py-2 rounded-md">Crop</button>
                                            <button id="cancelCropButton" class="ml-2 bg-gray-500 text-white px-4 py-2 rounded-md">Cancel</button>
                                        </div>
                                    </div>
                                </div>

                                <div class="text-xs text-error mt-[8px]">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Note:
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Image_should_be_in_HEIF_format
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.and_Maximum_file_size_is_5_MB .
                                </div>
                            </div>

                            @*Icon Image*@
                            <div>
                                <label class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Icon_Image
                                </label>
                                <div class="file-upload-common">
                                    <label for="file_input_business_icon" class="custom-file-upload w-[128px] flex-none text-ellipsis-customer ">
                                        <span>
                                            @CRS.ADMIN.APPLICATION.Resources.Resource.Choose_Icons
                                        </span>
                                    </label>
                                    <input id="file_input_business_icon" class="file-input" type="file" name="HostIconImageFile" value="@Model.HostIconImage"
                                           style="display:none;">
                                    <p id="file_name_bussiness_certificate"
                                       class="file-name w-max h-[23px] overflow-hidden pl-2 text-xs text-[#686868] leading-[25px]">
                                        @if (string.IsNullOrEmpty(Model.HostIconImage))
                                        {
                                            @CRS.ADMIN.APPLICATION.Resources.Resource.No_File_Choosen
                                        }
                                        else
                                        {
                                            string fileName1 = Path.GetFileName(Model.HostIconImage);
                                            @fileName1
                                        }
                                </div>
                                <div class="text-xs text-error mt-[8px]">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Note:
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Image_should_be_in_HEIF_format
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.and_Maximum_file_size_is_5_MB .
                                </div>
                            </div>

                            @*----------*@

                            <div class="grid gap-[16px]">
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Birth_Date
                                    </label>
                                    <div class="select-date-common flex gap-[16px]">

                                        @Html.TextBoxFor(model => model.BirthYear, new
                                       {
                                           @class = "input-common block w-[100px]",
                                           @placeholder = "YYYY",
                                           @autocomplete = "off",
                                           @maxlength = "4"
                                       })
                                        @Html.TextBoxFor(model => model.BirthMonth, new
                                            {
                                            @class = "input-common block w-[100px]",
                                            @placeholder = "MM",
                                            @autocomplete = "off",
                                            @maxlength = "2"
                                            })
                                        @Html.TextBoxFor(model => model.BirthDate, new
                                           {
                                           @class = "input-common block w-[100px]",
                                           @placeholder = "DD",
                                           @autocomplete = "off",
                                           @maxlength = "2"
                                           })
                                        @*<input id="birthYear" class="input-common block w-[100px]" type="text" name="BirthYearKey" value="@ViewBag.BirthYear" maxlength="4" placeholder="YYYY">
                                            <input id="birthMonth" class="input-common block w-[100px]" type="text" name="BirthMonthKey" value="@ViewBag.BirthMonth" maxlength="2" placeholder="MM">
                                            <input id="birthDay" class="input-common block w-[100px]" type="text" name="BirthDayKey" value="@ViewBag.BirthDate" maxlength="2" placeholder="DD">*@

                                    </div>

                                </div>
                                <div class="toogle-common">
                                    <label class="relative inline-flex items-center cursor-pointer">
                                        <input type="checkbox" value="" class="sr-only peer" checked>
                                        <div class="w-11 h-6 bg-gray-200 rounded-full peer peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-secondary-color-pink">
                                        </div>
                                        <span class=" pl-2 text-sm font-medium text-secondary-100">
                                            @CRS.ADMIN.APPLICATION.Resources.Resource.Hide
                                        </span>
                                    </label>
                                </div>
                                <div class="flex gap-[24px]">
                                    <div class="flex items-center checkbox-common py-[8px]">
                                        <input id="default-checkbox-year" type="checkbox" value=""
                                               class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300   ">
                                        <label for="default-checkbox-year" class="ml-2 text-sm font-medium text-secondary-100 ">
                                            @CRS.ADMIN.APPLICATION.Resources.Resource.Year
                                        </label>
                                    </div>
                                    <div class="flex items-center checkbox-common py-[8px]">
                                        <input id="default-checkbox-month" type="checkbox" value=""
                                               class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300   ">
                                        <label for="default-checkbox-month" class="ml-2 text-sm font-medium text-secondary-100 ">
                                            @CRS.ADMIN.APPLICATION.Resources.Resource.Month
                                        </label>
                                    </div>
                                    <div class="flex items-center checkbox-common py-[8px]">
                                        <input id="default-checkbox-date" type="checkbox" value=""
                                               class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300   ">
                                        <label for="default-checkbox-date" class="ml-2 text-sm font-medium text-secondary-100 ">
                                            @CRS.ADMIN.APPLICATION.Resources.Resource.Date
                                        </label>
                                    </div>
                                </div>
                                <div class="flex items-center justify-end checkbox-common py-[8px]">
                                    <input id="default-checkbox" type="checkbox" value=""
                                           class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300   ">
                                    <label for="default-checkbox" class="ml-2 text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Hide_Host_Info
                                    </label>
                                </div>
                            </div>
                            <div class="grid grid-cols-2 gap-x-5 gap-y-4">
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.BirthPlace
                                    </label>
                                    <select id="large" class="select-common block w-full " name="Address">
                                        @foreach (var item in ViewBag.BirthPlaceDdl as IEnumerable<SelectListItem>)
                                        {
                                            var selectedId = ViewBag.BirthPlacekey as string;
                                            if (item.Value == selectedId)
                                            {
                                                <option value="@item.Value" selected>
                                                    @item.Text
                                                </option>
                                            }
                                            else
                                            {
                                                <option value="@item.Value">
                                                    @item.Text
                                                </option>
                                            }
                                        }
                                    </select>

                                    <span class="error">
                                        @Html.ValidationMessageFor(m => m.Address)
                                    </span>
                                </div>
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Blood_Type
                                    </label>

                                    <select id="large" class="select-common block w-full " name="BloodGroupDDLKey">
                                        @foreach (var item in ViewBag.BloodGroupDDL as IEnumerable<SelectListItem>)
                                        {
                                            var selectedId = ViewBag.BloodGroupDDLKey as string;
                                            if (item.Value == selectedId)
                                            {
                                                <option value="@item.Value" selected>
                                                    @item.Text
                                                </option>
                                            }
                                            else
                                            {
                                                <option value="@item.Value">
                                                    @item.Text
                                                </option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="grid grid-cols-2 gap-x-5 gap-y-4">
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Constellation_Group
                                    </label>

                                    <select id="large" class="select-common block w-full " name="ZodiacSignsDDLKey">
                                        @foreach (var item in ViewBag.ZodiacSignsDDL as IEnumerable<SelectListItem>)
                                        {
                                            var selectedId = ViewBag.ZodiacSignsDDLKey as string;
                                            if (item.Value == selectedId)
                                            {
                                                <option value="@item.Value" selected>
                                                    @item.Text
                                                </option>
                                            }
                                            else
                                            {
                                                <option value="@item.Value">
                                                    @item.Text
                                                </option>
                                            }
                                        }
                                    </select>
                                    <span class="error">
                                        @Html.ValidationMessageFor(m => m.ConstellationGroup)
                                    </span>
                                </div>
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Previous_Occupation
                                    </label>
                                    @Html.TextBoxFor(model => model.PreviousOccupation, new
                                    {
                                       @class = "w-full",
                                       @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Previous_Occupation,
                                       //@onkeypress = "return isNumber(event)",
                                       autocomplete = "off",
                                       @maxLength = "150"
                                    })
                                    @*<select id="large" class="select-common block w-full " name="OccupationDDLKey">
                                            @foreach (var item in ViewBag.OccupationDDL as IEnumerable<SelectListItem>)
                                            {
                                                var selectedId = ViewBag.OccupationDDLKey as string;
                                                if (item.Value == selectedId)
                                                {
                                                    <option value="@item.Value" selected>
                                                        @item.Text
                                                    </option>
                                                }
                                                else
                                                {
                                                    <option value="@item.Value">
                                                        @item.Text
                                                    </option>
                                                }
                                            }
                                        </select>*@
                                </div>
                            </div>
                            <div class="grid grid-cols-2 gap-x-5 gap-y-4">
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Height
                                    </label>
                                    @Html.TextBoxFor(model => model.Height, new
                                    {
                                       @class = "w-full",
                                       @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Height,
                                       //@onkeypress = "return isNumber(event)",
                                       autocomplete = "off",
                                       @maxLength = "6"
                                    })

                                    @*<select id="large" class="select-common block w-full " name="Height">
                                            @foreach (var item in ViewBag.heightlistddl as IEnumerable<SelectListItem>)
                                            {
                                                var selectedId = ViewBag.heightlistkey as string;
                                                if (item.Value == selectedId)
                                                {
                                                    <option value="@item.Value" selected>
                                                        @item.Text
                                                    </option>
                                                }
                                                else
                                                {
                                                    <option value="@item.Value">
                                                        @item.Text
                                                    </option>
                                                }
                                            }
                                        </select>*@
                                    <span class="error">
                                        @Html.ValidationMessageFor(m => m.Height)
                                    </span>
                                </div>
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Liquor_Strength
                                    </label>

                                    <select id="large" class="select-common block w-full" name="LiquorStrengthDDLKey">
                                        @foreach (var item in ViewBag.LiquorStrengthDDL as IEnumerable<SelectListItem>)
                                        {
                                            var selectedId = ViewBag.LiquorStrengthDDLKey as string;
                                            if (item.Value == selectedId)
                                            {
                                                <option value="@item.Value" selected>
                                                    @item.Text
                                                </option>
                                            }
                                            else
                                            {
                                                <option value="@item.Value">
                                                    @item.Text
                                                </option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="input-field-common">
                                <label class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.HostIntroduction
                                </label>
                                @Html.TextAreaFor(model => model.HostIntroduction, new
                               {
                                   @class = "w-full",
                                   @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.HostIntroduction,
                                   //@onkeypress = "return isNumber(event)",
                                   autocomplete = "off",
                                   @maxLength = "500"
                               })
                                <span class="error">
                                    @Html.ValidationMessageFor(m => m.HostIntroduction)
                                </span>
                            </div>
                        </div>
                    </div>
                    <div id="content2" class="content-section" style="display: none;">
                        <div class="grid gap-4 py-[10px]">
                            <div class="flex gap-2 text-primary-300 text-sm font-semibold items-center mt-[10px]">
                                <div class="flex-none">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.SNS
                                </div>
                                <div class="bg-[#F4F4F4] h-[1px] w-full">
                                </div>
                            </div>
                            <div class="input-field-common">
                                <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Instagram
                                </label>
                                @Html.TextBoxFor(model => model.InstagramLink, new
                                {
                                   @class = "w-full",
                                   @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Instagram,
                                   //@onkeypress = "return isAlphabetWithSpace(event)",
                                   autocomplete = "off"
                                })
                                <span class="error">
                                    @Html.ValidationMessageFor(m => m.InstagramLink)
                                </span>
                            </div>
                            <div class="input-field-common">
                                <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Tiktok
                                </label>
                                @Html.TextBoxFor(model => model.TiktokLink, new
                                {
                                   @class = "w-full",
                                   @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Tiktok,
                                   //@onkeypress = "return isAlphabetWithSpace(event)",
                                   autocomplete = "off"
                                })
                                <span class="error">
                                    @Html.ValidationMessageFor(m => m.TiktokLink)
                                </span>
                            </div>
                            <div class="input-field-common">
                                <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Twitter
                                </label>
                                @Html.TextBoxFor(model => model.TwitterLink, new
                                {
                                   @class = "w-full",
                                   @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Twitter,
                                   //@onkeypress = "return isAlphabetWithSpace(event)",
                                   autocomplete = "off"
                                })
                                <span class="error">
                                    @Html.ValidationMessageFor(m => m.TwitterLink)
                                </span>
                            </div>
                            <div class="input-field-common">
                                <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Line
                                </label>
                                @Html.TextBoxFor(model => model.Line, new
                                {
                                   @class = "w-full",
                                   @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Line,
                                   autocomplete = "off"
                                })
                                <span class="error">
                                    @Html.ValidationMessageFor(m => m.Line)
                                </span>
                            </div>
                        </div>
                    </div>

                    @*Hot skills*@

                    <div id="content3" class="content-section" style="display: none;">
                        <div class="grid gap-4 py-[10px]">
                            <div class="flex gap-2 text-primary-300 text-sm font-semibold items-center mt-[10px]">
                                <div class="flex-none">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.HotSkills
                                </div>
                                <div class="bg-[#F4F4F4] h-[1px] w-full">
                                </div>
                            </div>

                            <div class="grid grid-cols-2 gap-x-5 gap-y-4">
                                @{
                                    int k = 0;
                                }
                                @for (int i = 0; i < Model.HostIdentityDataModel.Count; i++)
                                {
                                    if (Model.HostIdentityDataModel[i].IdentityType == "31".EncryptParameter())
                                    {
                                        <div @*  class="input-field-common"*@>
                                            <label class="block mb-[12px] text-sm font-medium text-secondary-text-2">
                                                @Model.HostIdentityDataModel[i].IdentityLabel
                                            </label>
                                            @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityType)
                                            @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityValue)
                                            @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityLabel)
                                            @if (!string.IsNullOrEmpty(Model.HostIdentityDataModel[i].InputType) && Model.HostIdentityDataModel[i].InputType.ToUpper() == "RANGE")
                                            {
                                                <div>
                                                    @{
                                                        var valueRange = string.IsNullOrEmpty(Model.HostIdentityDataModel[i].IdentityDescription) || Model.HostIdentityDataModel[i].IdentityDescription == "0" ? "0" : Model.HostIdentityDataModel[i].IdentityDescription;
                                                        //var valueRangeVal = string.IsNullOrEmpty(Model.HostIdentityDataModel[i].IdentityDescription) || Model.HostIdentityDataModel[i].IdentityDescription == "0" ? "0" : Model.HostIdentityDataModel[i].IdentityDescription;

                                                    }
                                                    <input type="range" class="sliderBlue" min="0" max="100" value="@valueRange" step="20" id="myRange_@k" oninput="updateRangeValue(@k, this.value)" />
                                                    @*<input type="range" min="0" max="100" value="20" step="20" oninput="updateRangeValue(@k, this.value)">*@
                                                    @*<p id="rangeValues_@k" name="">@valueRange</p>*@
                                                    <p id="rangeValue_@k" name="">@valueRange</p>
                                                    @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityDescription, new
                                               {
                                                   @Value = valueRange,
                                                   @id = "rangeValue2_" + k
                                               })
                                                </div>
                                            }
                                            @if (!string.IsNullOrEmpty(Model.HostIdentityDataModel[i].InputType) && Model.HostIdentityDataModel[i].InputType.ToUpper() == "INPUT")
                                            {
                                                @Html.TextBoxFor(model => Model.HostIdentityDataModel[i].IdentityDescription, new
                                                   {
                                                       @class = "w-full",
                                                       @placeholder = @Model.HostIdentityDataModel[i].IdentityLabel,
                                                       @onkeypress = "return isNumber(event)",
                                                       autocomplete = "off",
                                                       @maxLength = "3",
                                                       required = "required"
                                                   })
                                                <span class="error">
                                                    @Html.ValidationMessageFor(model => Model.HostIdentityDataModel[i].IdentityDescription)
                                                </span>
                                            }
                                        </div>
                                        k++;
                                    }
                                }
                            </div>



                            <div class="flex gap-2 text-primary-300 text-sm font-semibold items-center mt-[10px]">
                                <div class="flex-none">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Personality
                                </div>
                                <div class="bg-[#F4F4F4] h-[1px] w-full">
                                </div>
                            </div>
                            <div class="grid grid-cols-2 gap-x-5 gap-y-4">
                                @for (int i = 0; i < Model.HostIdentityDataModel.Count; i++)
                                {
                                    if (Model.HostIdentityDataModel[i].IdentityType == "32".EncryptParameter())
                                    {
                                        <div class="input-field-common">
                                            <label class="block mb-[12px] text-sm font-medium text-secondary-text-2">
                                                @Model.HostIdentityDataModel[i].IdentityLabel
                                            </label>
                                            @if (!string.IsNullOrEmpty(Model.HostIdentityDataModel[i].InputType) && Model.HostIdentityDataModel[i].InputType.ToUpper() == "INPUT")
                                            {
                                                @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityType)
                                                @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityValue)
                                                @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityLabel)
                                                @Html.TextBoxFor(model => Model.HostIdentityDataModel[i].IdentityDescription, new
                                                {
                                                    @class = "w-full",
                                                    @placeholder = @Model.HostIdentityDataModel[i].IdentityLabel,
                                                    //@onkeypress = "return isAlphabetWithSpace(event)",
                                                    autocomplete = "off",
                                                    @maxLength = "100"
                                                })
                                                <span class="error">
                                                    @Html.ValidationMessageFor(model => Model.HostIdentityDataModel[i].IdentityDescription)
                                                </span>
                                            }
                                            @if (!string.IsNullOrEmpty(Model.HostIdentityDataModel[i].InputType) && Model.HostIdentityDataModel[i].InputType.ToUpper() == "RANGE")
                                            {
                                                <div>
                                                    @{
                                                        var valueRange = string.IsNullOrEmpty(Model.HostIdentityDataModel[i].IdentityDescription) || Model.HostIdentityDataModel[i].IdentityDescription == "0" ? "0" : Model.HostIdentityDataModel[i].IdentityDescription;
                                                    }
                                                    <input type="range" class="sliderBlue" min="0" max="100" value="@valueRange" step="20" id="myRange_@k" oninput="updateRangeValue(@k, this.value)" />
                                                    <p id="rangeValue_@k" name="">@valueRange</p>

                                                    @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityDescription, new
                                               {
                                                   @Value = valueRange,
                                                   @id = "rangeValue_" + k,
                                                   @oninput = "updateRangeInput('" + @k + "', this.value)"
                                               })
                                                </div>
                                            }
                                        </div>
                                    }
                                }

                            </div>
                        </div>
                    </div>


                    @*-----------------------------------------------------*@

                    <div id="content4" class="content-section" style="display: none;">
                        <div class="grid gap-4 py-[10px]">
                            <div class="flex gap-2 text-primary-300 text-sm font-semibold items-center mt-[10px]">
                                <div class="flex-none">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Lifestyle
                                </div>
                                <div class="bg-[#F4F4F4] h-[1px] w-full">
                                </div>
                            </div>
                            @for (int i = 0; i < Model.HostIdentityDataModel.Count; i++)
                            {
                                if (Model.HostIdentityDataModel[i].IdentityType == "33".EncryptParameter())
                                {
                                    <div class="input-field-common">
                                        <label class="block mb-[12px] text-sm font-medium text-secondary-text-2">
                                            @Model.HostIdentityDataModel[i].IdentityLabel
                                        </label>
                                        @if (!string.IsNullOrEmpty(Model.HostIdentityDataModel[i].InputType) && Model.HostIdentityDataModel[i].InputType.ToUpper() == "INPUT")
                                        {
                                            @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityType)
                                            @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityValue)
                                            @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityLabel)
                                            @Html.TextAreaFor(model => Model.HostIdentityDataModel[i].IdentityDescription, new
                                            {
                                                @class = "w-full",
                                                @placeholder = @Model.HostIdentityDataModel[i].IdentityLabel,
                                                //@onkeypress = "return isAlphabetWithSpace(event)",
                                                autocomplete = "off",
                                                @maxLength = "500"
                                            })
                                            <span class="error">
                                                @Html.ValidationMessageFor(model => Model.HostIdentityDataModel[i].IdentityDescription)
                                            </span>
                                        }
                                        else if (!string.IsNullOrEmpty(Model.HostIdentityDataModel[i].InputType) && Model.HostIdentityDataModel[i].InputType.ToUpper() == "RANGE")
                                        {
                                            <div>
                                                @{
                                                    var valueRange = string.IsNullOrEmpty(Model.HostIdentityDataModel[i].IdentityDescription) || Model.HostIdentityDataModel[i].IdentityDescription == "0" ? "0" : Model.HostIdentityDataModel[i].IdentityDescription;

                                                }
                                                <input type="range" class="sliderBlue" min="0" max="100" value="@valueRange" step="20" id="myRange_@k" oninput="updateRangeValue(@k, this.value)" />
                                                <p id="rangeValue_@k" name="">@valueRange</p>

                                                @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityDescription, new
                                           {
                                               @Value = valueRange,
                                               @id = "rangeValue_" + k,
                                               @oninput = "updateRangeInput('" + @k + "', this.value)"
                                           })
                                            </div>
                                        }

                                    </div>
                                }
                            }
                        </div>
                    </div>
                    <div class="flex justify-between ">
                        <div>
                            <button class="btn btn-primary-normal leading-[12px] rounded-[4px] px-3 text-sm"
                                    id="previousBtn">
                                @CRS.ADMIN.APPLICATION.Resources.Resource.Previous
                            </button>
                        </div>
                        <div class="flex gap-6">
                            <button class="resetForm btn btn-primary-normal rounded-[4px] px-8 text-sm"
                                    data-drawer-hide="add-new-host-club" onclick="CancelFunction();">
                                @CRS.ADMIN.APPLICATION.Resources.Resource.Cancel
                            </button>
                            <button class="btn btn-primary-default rounded-[4px] px-8 text-sm leading-[10px]"
                                    id="nextBtn">
                                @CRS.ADMIN.APPLICATION.Resources.Resource.Next
                            </button>
                        </div>
                    </div>
                    <div class="flex justify-end py-4">
                        <div class="flex gap-6">
                            <a>
                                <button class="resetForm btn btn-primary-default h-[40px] px-8 rounded-[4px]  text-sm leading-[10px]" id="submit-button-id-clubplan" type="submit">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Submit
                                </button>
                            </a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>
    function updateRangeValue(k, value) {
        document.getElementById("rangeValue_" + k).innerText = value;
        $('#rangeValue2_' + k).val(value);
    }
    function updateRangeInput(k, value) {
        // Update the range input value
        $('#myRange_' + k).val(value);
        //document.getElementById('myRange_' + k).value = value;
    }

    document.getElementById("birthYear").addEventListener("input", function () {
        this.value = this.value.replace(/[^0-9]/g, '');
        if (this.value.length > 4) {
            this.value = this.value.slice(0, 4);
        }
    });

    document.getElementById("birthMonth").addEventListener("input", function () {
        this.value = this.value.replace(/[^0-9]/g, '');
        if (this.value.length > 2) {
            this.value = this.value.slice(0, 2);
        }
        if (parseInt(this.value) > 12) {
            this.value = '12';
        }
    });

    document.getElementById("birthDay").addEventListener("input", function () {
        this.value = this.value.replace(/[^0-9]/g, '');
        if (this.value.length > 2) {
            this.value = this.value.slice(0, 2);
        }
        if (parseInt(this.value) > 31) {
            this.value = '31';
        }
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        let cropper;
        const modal = document.getElementById('cropModal');
        const imageToCrop = document.getElementById('imageToCrop');
        const fileInput = document.getElementById('file_input_business_certificate');
        const fileNameDisplay = document.getElementById('file_input_business_certificate');

        fileInput.addEventListener('change', function (event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    imageToCrop.src = e.target.result;
                    modal.style.display = 'flex';

                    if (cropper) {
                        cropper.replace(e.target.result);
                    } else {
                        cropper = new Cropper(imageToCrop, {
                            //aspectRatio: 298 / 181, // Maintain aspect ratio
                            aspectRatio: 294 / 372,
                            viewMode: 1,
                            background: false,
                            zoomable: true,
                            scalable: true,
                            responsive: true,
                            autoCropArea: 1,
                        });
                    }

                    fileNameDisplay.textContent = file.name;
                };
                reader.readAsDataURL(file);
            }
        });

        document.getElementById('cropImageButton').addEventListener('click', function (event) {
            event.preventDefault();
            if (cropper) {
                // Get a higher resolution cropped canvas
                const canvas = cropper.getCroppedCanvas({
                    //width: 1600, // Increased width for high resolution
                    //height: 800, // Increased height for high resolution
                    width: 316, // Increased width for high resolution
                    height: 394, // Increased height for high resolution
                    imageSmoothingEnabled: true,
                    imageSmoothingQuality: 'high',
                });

                if (canvas) {
                    canvas.toBlob(function (blob) {
                        const formData = new FormData();
                        formData.append('croppedImage', blob);
                        console.log('Cropped image ready to upload', formData);

                        const reader = new FileReader();
                        reader.onload = function () {
                            const dataUrl = reader.result;
                            const dataTransfer = new DataTransfer();
                            const file = new File([blob], "croppedImage.jpg", { type: "image/jpeg" });
                            dataTransfer.items.add(file);
                            fileInput.files = dataTransfer.files;
                        };
                        reader.readAsDataURL(blob);

                        modal.style.display = 'none';
                        cropper.destroy();
                        cropper = null;
                    }, 'image/jpeg', 0.95);
                }
            }
        });

        document.getElementById('cancelCropButton').addEventListener('click', function () {
            modal.style.display = 'none';
            $('#file_input_logo').val('');
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
        });
    });
</script>