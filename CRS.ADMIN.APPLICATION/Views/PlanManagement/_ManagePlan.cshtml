@model CRS.ADMIN.APPLICATION.Models.PlanManagement.PlanManagementModel
<!-- add new host from -->
<div id="add-new-host-club"
     class="drawer-close-disable  flex justify-end fixed top-0 right-0 z-40 h-screen overflow-y-auto transition-transform translate-x-full "
     tabindex="-1" aria-labelledby="drawer-right-label">
    <div class="bg-white w-[616px] drawer-container relative">
        <div class="drawer-form-container sticky top-0 z-[5] ">
            <div class="drawer-form flex justify-between bg-secondary-color-pink py-[16px] px-[24px] h-[56px]">
                <div>
                    @CRS.ADMIN.APPLICATION.Resources.Resource.Edit_Plan
                </div>
                <button type="button" data-drawer-hide="add-new-host-club" aria-controls="add-new-host-club"
                        class="text-[20px]" id="CloseId">
                    <i class="las la-window-close text-white"></i>
                </button>
            </div>
        </div>
        @using (Html.BeginForm("ManagePlan", "PlanManagement", FormMethod.Post, new { @id = "ManagePlanForm", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            if (!string.IsNullOrEmpty(Model.PlanId))
            {
                @Html.HiddenFor(model => model.PlanId)
            }
            if (!string.IsNullOrEmpty(Model.PlanImage))
            {
                @Html.HiddenFor(model => model.PlanImage)
            }
            if (!string.IsNullOrEmpty(Model.PlanImage2))
            {
                @Html.HiddenFor(model => model.PlanImage2)
            }
            @*if (!string.IsNullOrEmpty(Model.IsStrikeOut))
                {
                    @Html.HiddenFor(model => model.IsStrikeOut)
                }*@
            <div class="p-[24px]">
                <div class=" py-4 grid gap-5">
                    <div class="input-field-common">
                        <label class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Plan_Name
                        </label>
                        @Html.TextBoxFor(model => model.PlanName, new { @class = "w-full rounded-[4px]", @placeholder = @CRS.ADMIN.APPLICATION.Resources.Resource.Plan_Name, @style = "border-radius:4px !important", @onkeypress = "return isAlphabetWithSpace(event)", autocomplete = "off", @maxLength = "50" })
                        <span class="error">
                            @Html.ValidationMessageFor(m => m.PlanName)
                        </span>
                    </div>
                    <div class="input-field-common">
                        <label class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Plan_Type
                        </label>
                        <select id="large" name="PlanType" class="default_select select-common block w-full" style="width: 100%;">
                            @foreach (var item in ViewBag.PlanList as IEnumerable<SelectListItem>)
                            {
                                var selectedId = Model.PlanType as string;
                                if (item.Value == selectedId)
                                {
                                    <option value="@item.Value" selected>@item.Text</option>
                                }
                                else
                                {
                                    <option value="@item.Value">
                                        @item.Text
                                    </option>
                                }
                            }
                        </select>
                        <span class="error">
                            @Html.ValidationMessageFor(m => m.PlanType)
                        </span>
                    </div>
                    <div class="input-field-common">
                        <label class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Plan_Category
                        </label>
                        <select name="PlanCategory" class="default_select select-common block w-full" style="width: 100%;">
                            @foreach (var item in ViewBag.PlanCategoryDDL as IEnumerable<SelectListItem>)
                            {
                                var selectedId = Model.PlanCategory as string;
                                if (item.Value == selectedId)
                                {
                                    <option value="@item.Value" selected>@item.Text</option>
                                }
                                else
                                {
                                    <option value="@item.Value">
                                        @item.Text
                                    </option>
                                }
                            }
                        </select>
                        <span class="error">
                            @Html.ValidationMessageFor(m => m.PlanCategory)
                        </span>
                    </div>
                    <div class="h-[2px] w-full bg-[#EBEBEB]"></div>
                    <div>
                        <label for="gallery" class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Image
                        </label>
                        <div class="file-upload-common bg-gray-gallery">
                            <label for="file_input_logo" class="custom-file-upload w-[128px] flex-none text-ellipsis-customer">
                                <span>
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Choose_Images
                                </span>
                            </label>
                            <input id="file_input_logo" class="file-input" name="ImageFile" type="file" style="display:none;">
                            <p id="file_name_logo"
                               class="file-name w-max h-[23px] overflow-hidden pl-2 text-xs text-[#686868] leading-[25px]">
                                @if (string.IsNullOrEmpty(Model.PlanImage))
                                {
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.No_File_Choosen
                                }
                                else
                                {
                                    string fileName = Path.GetFileName(Model.PlanImage);
                                    @fileName
                                }
                        </div>
                        <div class="text-xs text-error mt-[8px]">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Note:
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Image_should_be_in_HEIF_format
                            @CRS.ADMIN.APPLICATION.Resources.Resource.and_Maximum_file_size_is_5_MB .
                        </div>
                        <span class="error">
                            @Html.ValidationMessageFor(m => m.PlanImage)
                        </span>
                    </div>
                    <div>
                        <label for="gallery" class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Image 2
                        </label>
                        <div class="file-upload-common bg-gray-gallery">
                            <label for="file_input_logo2" class="custom-file-upload w-[128px] flex-none text-ellipsis-customer">
                                <span>
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Choose_Images
                                </span>
                            </label>
                            <input id="file_input_logo2" class="file-input" name="ImageFile2" type="file" style="display:none;">
                            <p id="file_name_logo2"
                               class="file-name w-max h-[23px] overflow-hidden pl-2 text-xs text-[#686868] leading-[25px]">
                                @if (string.IsNullOrEmpty(Model.PlanImage2))
                                {
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.No_File_Choosen
                                }
                                else
                                {
                                    string fileName = Path.GetFileName(Model.PlanImage2);
                                    @fileName
                                }
                        </div>
                        <div class="text-xs text-error mt-[8px]">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Note:
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Image_should_be_in_HEIF_format
                            @CRS.ADMIN.APPLICATION.Resources.Resource.and_Maximum_file_size_is_5_MB .
                        </div>
                        <span class="error">
                            @Html.ValidationMessageFor(m => m.PlanImage2)
                        </span>
                    </div>
                    <div class="input-field-common">
                        <label class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Time
                        </label>
                        <select id="large" name="PlanTime" class=" default_select select-common block w-full "
                                style="width: 100%;">
                            @foreach (var item in ViewBag.TimeList as IEnumerable<SelectListItem>)
                            {
                                var selectedId = Model.PlanTime as string;
                                if (item.Value == selectedId)
                                {
                                    <option value="@item.Value" selected>@item.Text</option>
                                }
                                else
                                {
                                    <option value="@item.Value">
                                        @item.Text
                                    </option>
                                }
                            }
                        </select>
                        <span class="error">
                            @Html.ValidationMessageFor(m => m.PlanTime)
                        </span>
                    </div>
                    <div class="input-field-common">
                        @{
                            <label class="block mb-[12px] text-sm font-medium text-secondary-100 flex justify-between">
                                @CRS.ADMIN.APPLICATION.Resources.Resource.Price
                                @if (!string.IsNullOrEmpty(Model.IsStrikeOut))
                                {
                                    if (Model.IsStrikeOut.Trim().ToUpper() == "A")
                                    {
                                        <div class="flex items-center gap-1">
                                            <input style="padding:0" class="rounded-0" type="checkbox" id="chkShowInput" onclick="toggleInputField()" name="IsStrikeOut" checked />
                                            @CRS.ADMIN.APPLICATION.Resources.Resource.Strike_Out
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="flex items-center gap-1">
                                            <input style="padding:0" class="rounded-0" type="checkbox" id="chkShowInput" onclick="toggleInputField()" name="IsStrikeOut" />
                                            @CRS.ADMIN.APPLICATION.Resources.Resource.Strike_Out
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="flex items-center gap-1">
                                        <input style="padding:0" class="rounded-0" type="checkbox" id="chkShowInput" onclick="toggleInputField()" name="IsStrikeOut" />
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Strike_Out
                                    </div>
                                }
                            </label>
                        }

                        @Html.TextBoxFor(model => model.Price, new { @class = "w-full rounded-[4px]", @placeholder = @CRS.ADMIN.APPLICATION.Resources.Resource.Price, @style = "border-radius:4px !important", @onkeypress = "return isNumber(event)", autocomplete = "off", @maxLength = "7" })
                        <span class="error">
                            @Html.ValidationMessageFor(m => m.Price)
                        </span>
                    </div>
                    @{
                        if (!string.IsNullOrEmpty(Model.IsStrikeOut))
                        {
                            if (Model.IsStrikeOut.Trim().ToUpper() == "A")
                            {
                                <div class="input-field-common" id="txtInputField" style="display: block;">
                                    <label class="block mb-[12px] text-sm font-medium text-secondary-100">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Offer_Price
                                    </label>
                                    @Html.TextBoxFor(model => model.StrikePrice, new { @class = "w-full rounded-[4px]", @placeholder = "0", @style = "border-radius:4px !important", @onkeypress = "return isNumber(event)", autocomplete = "off", @maxLength = "7" })

                                    @*<input type="text" placeholder="0" class="w-full" />*@
                                </div>
                            }
                            else
                            {
                                <div class="input-field-common" id="txtInputField" style="display: none;">
                                    <label class="block mb-[12px] text-sm font-medium text-secondary-100">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Offer_Price
                                    </label>
                                    @Html.TextBoxFor(model => model.StrikePrice, new { @class = "w-full rounded-[4px]", @placeholder = "0", @style = "border-radius:4px !important", @onkeypress = "return isNumber(event)", autocomplete = "off", @maxLength = "7" })

                                    @*<input type="text" placeholder="0" class="w-full" />*@
                                </div>
                            }
                        }
                        else
                        {
                            <div class="input-field-common" id="txtInputField" style="display: none;">
                                <label class="block mb-[12px] text-sm font-medium text-secondary-100">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Offer_Price
                                </label>
                                @Html.TextBoxFor(model => model.StrikePrice, new { @class = "w-full rounded-[4px]", @placeholder = "0", @style = "border-radius:4px !important", @onkeypress = "return isNumber(event)", autocomplete = "off", @maxLength = "7" })

                                @*<input type="text" placeholder="0" class="w-full" />*@
                            </div>
                        }
                    }

                    <div class="input-field-common">
                        <label class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Liquor
                        </label>
                        <select id="large" name="Liquor" class=" default_select select-common block w-full "
                                style="width: 100%;">
                            @foreach (var item in ViewBag.LiquorList as IEnumerable<SelectListItem>)
                            {
                                var selectedId = Model.Liquor as string;
                                if (item.Value == selectedId)
                                {
                                    <option value="@item.Value" selected>@item.Text</option>
                                }
                                else
                                {
                                    <option value="@item.Value">
                                        @item.Text
                                    </option>
                                }
                            }
                        </select>
                        <span class="error">
                            @Html.ValidationMessageFor(m => m.Liquor)
                        </span>
                    </div>
                    <div class="input-field-common">
                        <label class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Nomination
                        </label>
                        <select id="large" name="Nomination" class=" default_select select-common block w-full "
                                style="width: 100%;">
                            @for (int i = 1; i <= 10; i++)
                            {
                                var selectedId = Model.Nomination as string;
                                if (i.ToString() == selectedId)
                                {
                                    <option value="@i" selected>@i</option>
                                }
                                else
                                {
                                    <option value="@i">
                                        @i
                                    </option>
                                }
                            }
                        </select>
                        <span class="error">
                            @Html.ValidationMessageFor(m => m.Nomination)
                        </span>
                    </div>

                    <div class="input-field-common">
                        <label class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.NoOfPeople
                        </label>
                        <select name="NoOfPeople" class=" default_select select-common block w-full "
                                style="width: 100%;">
                            @for (int i = 1; i <= 10; i++)
                            {
                                var selectedId = Model.NoOfPeople;
                                if (i == selectedId)
                                {
                                    <option value="@i" selected>@i</option>
                                }
                                else
                                {
                                    <option value="@i">
                                        @i
                                    </option>
                                }
                            }
                        </select>
                        <span class="error">
                            @Html.ValidationMessageFor(m => m.NoOfPeople)
                        </span>
                    </div>

                    <div class="input-field-common">
                        <label class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Remarks
                        </label>
                        @Html.TextAreaFor(model => model.Remarks, new { @class = "w-full", @placeholder = @CRS.ADMIN.APPLICATION.Resources.Resource.Remarks, @onkeypress = "return isNumberWithDot(event)", autocomplete = "off", @maxLength = 200 })
                        <span class="error">
                            @Html.ValidationMessageFor(m => m.Remarks)
                        </span>
                    </div>
                    <div class="btn w-max px-4 border-primary-100 text-primary-100 gap-2 rounded-[4px] "
                         style="border: 1px dashed;" id="addNewBtnToggle">
                        <i class="las la-plus-circle text-[18px]"></i> @CRS.ADMIN.APPLICATION.Resources.Resource.Add_New
                    </div>
                    <div class="input-field-common toggleable">
                        <label class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Additional_Field 1
                        </label>
                        @Html.TextBoxFor(model => model.ExtraField1, new { @class = "w-full rounded-[4px]", @placeholder = @CRS.ADMIN.APPLICATION.Resources.Resource.Enter_Additional_Information, @style = "border-radius:4px !important", @onkeypress = "return isAlphabateOnly(event)", autocomplete = "off" })
                    </div>
                    <div class="input-field-common toggleable">
                        <label class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Additional_Field 2
                        </label>
                        @Html.TextBoxFor(model => model.ExtraField2, new { @class = "w-full rounded-[4px]", @placeholder = @CRS.ADMIN.APPLICATION.Resources.Resource.Enter_Additional_Information, @style = "border-radius:4px !important", @onkeypress = "return isAlphabateOnly(event)", autocomplete = "off" })
                    </div>
                    <div class="input-field-common toggleable">
                        <label class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Additional_Field 3
                        </label>
                        @Html.TextBoxFor(model => model.ExtraField3, new { @class = "w-full rounded-[4px]", @placeholder = @CRS.ADMIN.APPLICATION.Resources.Resource.Enter_Additional_Information, @style = "border-radius:4px !important", @onkeypress = "return isAlphabateOnly(event)", autocomplete = "off" })
                    </div>
                </div>
                <div class="flex justify-end ">
                    <div class="flex gap-6">
                        <button class="resetForm btn btn-primary-normal rounded-[4px] px-8 text-sm"
                                data-drawer-hide="add-new-host-club" id="CancelId" type="button">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Cancel
                        </button>
                        <button class="resetForm btn btn-primary-default px-8 rounded-[4px]  text-sm leading-[10px]"
                                id="saveData" type="submit">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Submit
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<style>
    input[type="checkbox"] {
        color: #fff;
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        width: 16px;
        height: 16px;
        border: 2px solid red;
        border-radius: 0px;
        outline: none;
        cursor: pointer;
    }

        /* Custom tick mark */
        input[type="checkbox"]::before {
            content: "";
            display: inline-block;
            width: 10px;
            height: 5px;
            border-left: 2px solid transparent; /* Color of the tick mark */
            border-bottom: 2px solid transparent; /* Color of the tick mark */
            transform: rotate(-45deg);
            position: relative;
            top: -8px;
            left: 2px;
        }

        input[type="checkbox"]:checked {
            border: 2px solid #D75A8B;
        }
            /* Change tick mark color when checkbox is checked */
            input[type="checkbox"]:checked::before {
                border-color: #D75A8B; /* Change this color to whatever you want */
            }
</style>